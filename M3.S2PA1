#include <mpi.h>
#include <stdio.h>
#include <iostream>

using namespace std;

int main(int argc, char** argv) {
    int numtasks, rank, dest, source, name_len, rc, count, tag = 1, value = 0; 

    char inmsg, outmsg = 'x';

    char name[MPI_MAX_PROCESSOR_NAME];    

    MPI_Status Stat;
    
    // Initialize the MPI environment
    MPI_Init(&argc,&argv);

    // Get the number of tasks/process
    MPI_Comm_size(MPI_COMM_WORLD, &numtasks);

    // Get the rank
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    // Find the processor name
    MPI_Get_processor_name(name, &name_len);

    /*
    If rank = 0, is master node
    Sends message to workers
    */
    if (rank == 0)
    {
        printf("(BCAST) Enter a number to broadcast and assign to the 'value' variable: \n");
        scanf("%d", &value);
        
        dest = 1;
        source = 1;
        MPI_Send(&outmsg, 1, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
        MPI_Recv(&inmsg, 1, MPI_CHAR, source, tag, MPI_COMM_WORLD, &Stat);
    }

    // /*
    // If rank is not 0, is worker node
    // Sends message to master
    // */
    else
    {
        printf("(BCAST) Process %d, Name: %s: My value BEFORE receiving the broadcast is %d\n", rank, name, value);
        
        dest = 0;
        source = 0;
        MPI_Recv(&inmsg, 1, MPI_CHAR, source, tag, MPI_COMM_WORLD, &Stat);
        MPI_Send(&outmsg, 1, MPI_CHAR, dest, tag, MPI_COMM_WORLD);
    }

    MPI_Get_count(&Stat, MPI_CHAR, &count);
    
    // Print off a hello world message
    printf("(SEND/RECV) Hello World! You get this message from %s, rank %d out of %d\n",
           name, rank, numtasks);

    MPI_Bcast(&value, 1, MPI_INT, 0, MPI_COMM_WORLD);

    printf("(BCAST) Process %d, Name: %s: My value AFTER receiving the broadcast is %d\n", rank, name, value);

    // Finalize the MPI environment
    MPI_Finalize();
}
